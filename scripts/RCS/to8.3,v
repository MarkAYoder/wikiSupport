head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	96.02.07.18.09.06;	author myoder;	state Exp;
branches;
next	1.5;

1.5
date	96.02.07.14.03.18;	author myoder;	state Exp;
branches;
next	1.4;

1.4
date	96.01.17.22.22.49;	author myoder;	state Exp;
branches;
next	1.3;

1.3
date	96.01.17.20.33.31;	author myoder;	state Exp;
branches;
next	1.2;

1.2
date	96.01.10.21.29.48;	author myoder;	state Exp;
branches;
next	1.1;

1.1
date	95.10.10.14.08.18;	author myoder;	state Exp;
branches;
next	;


desc
@The routine will shorten filenames to 8 chars with 3 char extension.
It will then go through all the html files and correct the paths to
used the 8.3 names.
@


1.6
log
@Really fixed the <a turning to <img problem (I think).
@
text
@#!/usr/local/gnu/bin/perl

# This file converts long file names to 8.3 format and changes
# the html files to find the new names.
# The options are:
#	-a	do all. rm files ending with ~ and .old
#			remake the Demo and Lab overviews.
#	-d	debug	tell me what you are doing
#	-f	fixhtml	checks in each .htm to see if it used a filename that
#			has changed.  If so it updates it.
#	-m	mapfile figure out what maps where and move the files.
#		If -m is not given the mapping from a previous run will
#		be used, files will not be moved, but the html will be
#		converted if the -f is given
# Usage:
#	cd Chapters
#	to8.3 -afm 1Sines	# rm's *.old and *~ files
#				# renames files and builds a database mapping
				#  the old names to new
				# reads all the .htm files and replaces old
				#  names with new
				# remakes (via MakeDemo) the overview.htm
				#  files in Demos and Labs.

$Header = '$Header: /home/kirin/myoder/bookcd/support/scripts/RCS/to8.3,v 1.5 1996/02/07 14:03:18 myoder Exp myoder $';

# local requires
require 'getparams.pl';

# other requires
require 'getopts.pl';

# open the filename mapping database

$db_file = $ENV{'MAPPINGDATA'};

#if ( ! -e $db_file . ".dir") {
#	die "$0: Cannot open mapping database $db_file\n";
#}
print "$db_file\n";
dbmopen(%Map, $db_file, 0666) ||
	die "Cannot open mapping database $db_file";

$print_db = 0;
if($print_db) {
	print "----------------\n";
	while (($key,$val) = each %Map) {
 		print $key, ' = ', $val, "\n";
	}
	print "----------------\n";
}	# if($print_db)

 # Process the command line options
&Getopts('adfm');

$debug = $opt_d;
print "Debugging on\n" if $debug;

# The first pass renames all the files names that are too long and
# adds them to the database.

# process each file on the command line
&removeold(@@ARGV) if $opt_a;

&rename(@@ARGV) if $opt_m;

&fixhtml(@@ARGV) if $opt_f;

&remakeDemo(@@ARGV) if $opt_a;

#================
# rename
#================
sub rename {
local($dir) = @@_;
local($name, $ext, $newname, $newext);
local($newfile);

print "$dir\n" if $debug;


opendir(DIR, $dir);
@@files = grep(!/^\.\.?$/, readdir(DIR));
foreach $file (@@files) {
	$_ = $file;
	next if $_ eq 'support_makefile';
	print "$_\n" if $debug;
#	RSC files end in ,v  pull the ,v off, do the renameing and
#	then put the ,v back on.
	if(/,v$/) {
	    print "Found RCS name, $file is now " if $debug;
	    $file = substr($file, 0, length($file)-2);
	    $_ = $file;
	    print "$file\n" if $debug;
	    $cv = ",v";
	} else {
	    $cv = "";
	    }

	if($Map{"$file"}) {	# Have we seen this name before?
	    $newfile = $Map{"$file"};	# Yes
	} else {		# No, create a new name.
	    if( /\./) {	# the name has a "." in it
		($name, $ext) = /(\w*)\.(\w*)/;
#		print "($name) ($ext)\n" if $debug;

		$newname = substr($name, 0, 8);
		$newext  = substr($ext, 0, 3);
#		print "($newname) ($newext)\n" if $debug;
		$newfile = $newname . '.' . $newext;
	    } else {
		$newfile = substr($file, 0, 8);
	    }
	}
#	print "$newfile\n";
	
	if($newfile ne $file) {
		# Is there already a file by this name?
		while(-e "$dir/$newfile" . $cv) {
		    # Yes, ask for a new name
		    print "Rename Conflict! $file$cv maps to $newfile$cv ";
		    print "what name shall I use? \n";
		    chop($newfile = <STDIN>);
		    print "You entered ($newfile$cv)\n";
		}
		# put in database
		$Map{"$file"} = "$newfile";
#		$Map{$newfile} = $file;
		print "$file$cv maps to $newfile$cv\n";
		rename("$dir/$file$cv", "$dir/$newfile$cv");
		}
	}	

closedir(DIR);

opendir(DIR, $dir);
foreach $file (readdir(DIR)) {
	$_ = $file;
	next if $_ eq '.' || $_ eq '..';
	print "$_\n" if $debug;
	if(-d $dir.'/'.$file) {
		&rename($dir.'/'.$file);
	}	
}	

}

#============
# fixhtml
#============
sub fixhtml {
local($dir) = @@_;
local($file, @@files);

# print "fixhtml($dir)\n";

opendir(DIR, $dir);
@@files = readdir(DIR);
closedir(DIR);

foreach $file (@@files) {
	$_ = $file;
#	print "$file\n";
	if(-d "$dir/$file" && $file ne '.' && $file ne '..') {
#		print "fixhtml($dir/$file)\n";
		&fixhtml("$dir/$file");
	} elsif(/\.htm$/) {
		&converthtml("$dir/$file");
	} elsif(/\.cd$/) {
		&converthtml("$dir/$file");
	}	
}


}

#===========
# converthtml
#===========
sub converthtml {
local($file) = @@_;
print "converthtml($file)\n";

$oldfile = $file . '.old';
rename($file, $oldfile);

open(INFILE, $oldfile) || die;
open(HTML, '>' . $file) || die;

# print "Reading $file\n";

# Read the entire input file.
@@allwords = ();
while(<INFILE>) {
	@@linewords = split(/([<>])/);
	push(@@allwords, @@linewords);
}

&htmlscan(@@allwords);

# print "Done scanning\n";

close(INFILE);
close(HTML);
}

#===========================
# htmlscan
#===========================
# Scans through array of strings looking for < followed by an
# html extenstion.  If it is found it is expanded, if not it is
# just passed through.

sub htmlscan {
local(@@allwords) = @@_;
local($tag) = '';

# print "htmlscan()\n";

while(@@allwords) {
	$word = shift(@@allwords);

	if($word eq ">") {	# A complete html tag has been found
		$tag .= $word;
		&foundtag($tag);
		$tag = '';
		}
	elsif($word eq "<" || $tag) {	# the start of a tag
		$tag .= $word;
		}
	else {	# no tag, keep passing things through
		print HTML $word;
	}
}	# while(@@allwords)
}	# htmlscan()

#===========================
# foundtag
#===========================
sub foundtag {
local($tag) = @@_;
local($debug) = 0;
local($file);

# print "Tag $tag\n" if $debug;
@@fields = split(/[<\s>]/, $tag);	# Parse so we can get to the first word
#foreach $tmp (@@fields) {
#	print "fields[] = $tmp\n";
#	}

$tag2 = @@fields[1];
$tag2 =~ y/A-Z/a-z/;	# Make lowercase
# check only a and img tags.

if($tag2 eq 'a' || $tag2 eq 'img') {
	print "Found tag, $tag2\n" if $debug;
	%params = &getparams($tag);
	if($path = $params{'href'}) {
		$file = 'href';
	} elsif($path = $params{'src'}) {
		$file = 'src';
	} else { $file = '';}
	if ($file) {
#		print "$file\n" if $debug;
		$_ = $params{$file};
		break if(/:/);	# don't touch non-local files.
		# take the path apart and check each component.
		@@parts = split('/', $path);
		foreach $part (@@parts) {
			print "$part\n" if $debug;
			($base, $anchor) = split("#", $part);
			if ($Map{$base}) {
				print "$base = $Map{$base}\n" if $debug;
				$base = $Map{$base};
			}
			$part = $base;
			$part .= "#$anchor" if ($anchor);
		}
		$path = join('/', @@parts);
		$params{$file} = "\"$path\"";
		print "$path\n" if $debug;
	}
	$tag = "<$tag2 " . &putparams(%params) . '>';

	} # if($value)
print HTML "$tag";
}

#============
# removeold
#============
sub removeold {
local($dir) = @@_;
local($tmp);

print "removeold($dir)\n";
print "I found:\n";
system("find $dir -name \"\*\~\" -print");
print "shall I remove them? (y or n)\n";
chop($tmp=<STDIN>);
if($tmp eq "y") {
	system("find $dir -name \"\*\~\" -print -exec rm {} \\;");
	}

print("I found:\n");
system("find $dir -name \"\*.old\" -print");
print "shall I remove thme? (y or n)\n";
chop($tmp=<STDIN>);
if($tmp eq "y") {
	system("find $dir -name \"\*.old\" -print -exec rm {} \\;");
	}
}

#============
# remmakeDemo
#============
sub remakeDemo {
local($dir) = @@_;

print "remakeDemo($dir)\n";

# system("cd $dir/Demos; MakeDemo");

# system("cd $dir/Labs; MakeDemo");
}
@


1.5
log
@Fixed $tag initialization bug in htmlscan().
@
text
@d25 1
a25 1
$Header = '$Header: /home/kirin/myoder/bookcd/support/scripts/RCS/to8.3,v 1.4 1996/01/17 22:22:49 myoder Exp myoder $';
d169 2
d283 2
a284 5
	if($file eq "href") {
		$tag = "<a " . &putparams(%params) . '>';
	} else {
		$tag = "<img " . &putparams(%params) . '>';
	}
@


1.4
log
@Removed the MakeDemo stuff.  It didn't work at GT.
@
text
@d25 1
a25 1
$Header = '$Header: /home/kirin/myoder/bookcd/support/scripts/RCS/to8.3,v 1.3 1996/01/17 20:33:31 myoder Exp myoder $';
d214 1
a214 1
local($tag);
@


1.3
log
@Added -a flag.  -a will rm *~ and *.ld before renaming.
Added -f flag.  -f is now needed to fix the .htm files.
-a also tries to run MakeDemo  in the Demos and Labs directories.
@
text
@d25 1
a25 1
$Header = '$Header: /database/bookcd/support/scripts/RCS/to8.3,v 1.2 1996/01/10 21:29:48 myoder Exp $';
d299 1
a299 1
print("find $dir -name \"\*\~\" -print");
d303 1
a303 1
	print("find $dir -name \"\*\~\" -print -exec rm {} \\;");
d307 1
a307 1
print("find $dir -name \"\*.old\" -print");
d311 1
a311 1
	print("find $dir -name \"\*.old\" -print -exec rm {} \\;");
d323 1
a323 1
system("cd $dir/Demos; MakeDemo");
d325 1
a325 1
system("cd $dir/Labs; MakeDemo");
@


1.2
log
@Reports name conflicts and asks for a new name.
Ignores suport_makefile
Handles RCS filename (*,v) correctly.
@
text
@d5 19
d25 1
a25 2

$Header = '$Header: /database/bookcd/support/scripts/RCS/to8.3,v 1.1 1995/10/10 14:08:18 myoder Exp $';
d54 1
a54 1
&Getopts('dm');
d63 2
d67 3
a69 1
&fixhtml(@@ARGV);
d288 38
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#!/usr/sbin/perl
d7 1
a7 1
$Header = '$Header$';
d64 1
a64 1
#	next if $_ eq '.' || $_ eq '..';
d66 8
a73 8
	if( /\./) {
	($name, $ext) = /(\w*)\.(\w*)/;
#	print "($name) ($ext)\n" if $debug;
	
	$newname = substr($name, 0, 8);
	$newext  = substr($ext, 0, 3);
#	print "($newname) ($newext)\n" if $debug;
	$newfile = $newname . '.' . $newext;
d75 15
d91 1
d94 1
a94 1

d96 8
d105 4
a108 4
		$Map{$file} = $newfile;
		$Map{$newfile} = $file;
		print "$file maps to $newfile\n";
		rename("$dir/$file", "$dir/$newfile");
d131 3
d136 4
a139 1
foreach $file (readdir(DIR)) {
d141 3
a143 2
	if(-d $file && $file ne '.' && $file ne '..') {
		print "fixhtml($dir/$file)\n";
a149 1
closedir(DIR);
d163 2
a164 2
open(INFILE, $oldfile);
open(HTML, '>' . $file);
d166 1
a166 1
print "Reading $file\n";
d177 2
d193 2
@
