head	2.3;
access;
symbols;
locks
	myoder:2.3; strict;
comment	@#@;


2.3
date	2000.04.12.20.00.54;	author myoder;	state Exp;
branches;
next	2.2;

2.2
date	2000.04.12.19.46.39;	author myoder;	state Exp;
branches;
next	2.1;

2.1
date	2000.04.12.19.44.45;	author myoder;	state Exp;
branches;
next	1.20;

1.20
date	97.10.24.16.39.04;	author myoder;	state Exp;
branches;
next	1.19;

1.19
date	97.10.23.21.03.28;	author myoder;	state Exp;
branches;
next	1.18;

1.18
date	97.09.30.17.35.18;	author myoder;	state Exp;
branches;
next	1.17;

1.17
date	97.09.17.22.13.55;	author myoder;	state Exp;
branches;
next	1.16;

1.16
date	97.02.28.17.00.49;	author myoder;	state Exp;
branches;
next	1.15;

1.15
date	97.02.27.17.52.58;	author myoder;	state Exp;
branches;
next	1.14;

1.14
date	96.11.12.19.01.13;	author myoder;	state Exp;
branches;
next	1.13;

1.13
date	96.06.04.21.08.37;	author myoder;	state Exp;
branches;
next	1.12;

1.12
date	96.06.03.17.46.58;	author myoder;	state Exp;
branches;
next	1.11;

1.11
date	95.08.08.17.04.21;	author myoder;	state Exp;
branches;
next	1.10;

1.10
date	95.07.06.16.58.22;	author myoder;	state Exp;
branches;
next	1.9;

1.9
date	95.06.29.21.46.54;	author myoder;	state Exp;
branches;
next	1.8;

1.8
date	95.06.19.18.26.19;	author myoder;	state Exp;
branches;
next	1.7;

1.7
date	95.06.19.18.16.42;	author myoder;	state Exp;
branches;
next	1.6;

1.6
date	95.06.19.18.10.24;	author myoder;	state Exp;
branches;
next	1.5;

1.5
date	95.06.01.18.57.57;	author myoder;	state Exp;
branches;
next	1.4;

1.4
date	95.06.01.16.45.36;	author myoder;	state Exp;
branches;
next	1.3;

1.3
date	95.06.01.16.43.56;	author myoder;	state Exp;
branches;
next	1.2;

1.2
date	95.06.01.16.42.43;	author myoder;	state Exp;
branches;
next	1.1;

1.1
date	95.06.01.15.55.20;	author myoder;	state Exp;
branches;
next	;


desc
@# Contains:
# findpath($file, @@path) - looks for $file in @@path
# relpath($fromdir, $tofile) - finds relative path from $fromdir to $tofile
# anchor(%params) - returns html for an anchor <a ....> gets parameters
#                   from %params which generated by getparams()
# img(%params) - same as anchor, but for images.
@


2.3
log
@Still guessing.
@
text
@# Contains:
# findpath($file, @@path) - looks for $file in @@path
# relpath($tofile) - finds relative path from current dir to $tofile
# anchor(%params) - returns html for an anchor <a ....> gets parameters
#                   from %params which generated by getparams()
# img(%params) - same as anchor, but for images.

#"$Log: findpath.pl,v $
#Revision 1.20  1997/10/24  16:39:04  myoder
#Added Embedded option in <movie>
#
#Revision 1.18  1997/09/30  17:35:18  myoder
#Commented out a debug message.
#
#Revision 1.17  1997/09/17  22:13:55  myoder
#Hacked anchor to handle onClick=windo.open("this.html".,,).
#so relpath will find the path to this.html.
#Hacked a second argument to relpath.  If 1, relpath will put ""'s around
#the path returned.
#findpath only prints the search path once when it can't find a file.
#
#Revision 1.16  1997/02/28  17:00:49  myoder
#Added plusinspage to <embed> tag.
#
#Revision 1.15  1997/02/27  17:52:58  myoder
#Added <movie> tag.
#
#Revision 1.14  1996/11/12  19:01:13  myoder
#hacked relpath to relpath2 which returns the path from the
#top of the CD structure.
#
#Revision 1.13  1996/06/04  21:08:37  myoder
#Counts number of missing files and only reports the first 10.
#
#Revision 1.12  1996/06/03  17:46:58  myoder
#Added code to findpath and relpath to remove extra ./ in pathes.
#
#Revision 1.11  1995/08/08  17:04:21  myoder
#findpath() will return if the path begins with a /
#
#Revision 1.10  1995/07/06  16:58:22  myoder
#findpath now uses the global variable @@path instead of a second parameter.
#relpath simply returns paths that are already relative.
#
#Revision 1.9  1995/06/29  21:46:54  myoder
#Fixed bug:  added & to relpath.
#
#Revision 1.8  1995/06/19  18:26:19  myoder
#Added 1; at the end so it will work with 'require'.
#
#Revision 1.7  1995/06/19  18:16:42  myoder
#*** empty log message ***
#
#Revision 1.6  1995/06/19  18:10:24  myoder
#Fixed comment bug
#
#Revision 1.5  1995/06/01  18:57:57  myoder
#relpath($tofile) now takes only one argument and finds the relative
#path from the current directory.
#If there is no / in $tofile relpath() returns $tofile.
#anchor and img return relative paths.
#anchor and img now use putparams().
#
#Revision 1.4  1995/06/01  16:45:36  myoder
#Changed some comments with % to #
#
#Revision 1.3  1995/06/01  16:43:56  myoder
#Changed comment character to #
#
#Revision 1.2  1995/06/01  16:42:43  myoder
#Changed comment character to #
#
#Revision 1.1  1995/06/01  15:55:20  myoder
#Initial revision
#";
$Header = '$Header: /home/ratbert5/myoder/cd/support/lib/RCS/findpath.pl,v 1.20 1997/10/24 16:39:04 myoder Exp myoder $';

#============
# findpath
#============

sub findpath {
# 
local($file, @@path1) = @@_;
local($path, $full);
local($debug) = 0;

$_ = $file;

s#/\./#/#g;    # Change /./ to / in pathes
s#^\./##g;     # Remove ./ from the beginning of pathes.
$file = $_;

return $file if(/^\//);	# return if there is a / at the begining
			# of the file name
#return $file if(/news/); it's a news reference

foreach $path (@@path) {
	$full = $path . "/" . $file;
	print "$full\n" if $debug;
	if(-e $full) {
		return(&relpath($full));
	}
}
return($file) if ($file eq "#");

$missingcount++;
if ($missingcount == 1) {
    print "findpath: Can't find $file in @@path\n";
}
elsif ($missingcount < 10) {
    print "findpath: Can't find $file\n";
}
elsif($missingcount == 10) {
    print "More not found";
} else {
    print ".";
}

return($file);
}

#============
# relpath
#============

sub relpath {
# finds a relative path between current directory and tofile

local($tofile, $quot) = @@_;
local(@@from, @@to);
local($debug) = 0;

print "relpath called with $tofile and $quot\n" if $debug;

$_ = $tofile;

s#/\./#/#g;     # Change /./ to /
s#^\./##g;      # Remove ./ from beginning of paths.

$tofile = $_;

#return $tofile if(/[^\/]/);# Don't mess with the file if no /'s.
# return if the path is already relative
if (/^[^\/]/) {
    if($quot) {
	return "\"" .  $tofile . "\"";
    }
    else {
	return $tofile;
    }
}
# return $tofile if /^[^\/]/;

@@from = split(/\//, $pwd);
@@to   = split(/\//, $tofile);
print "\n@@from\n@@to\n" if $debug;

while($from[0] eq $to[0] && $#to && $#from) {
	shift(@@from);
	shift(@@to);
	print "\n@@from\n@@to\n" if $debug;
}

$count = $#from + 1;
print "count = $count\n" if $debug;
$newpath = "../" x $count . join('/', @@to);
print "newpath = $newpath\n" if $debug;

# print "quot = $quot\n";
if($quot) {
    print "Adding quotes\n";
    return("\"" . $newpath . "\"");
}
else {
    return($newpath);
}
}

#============
# relpath2
#============

sub relpath2 {
# finds a relative path between current directory and tofile

local($tofile, $pwd) = @@_;
local(@@from, @@to);
local($debug) = 0;

print "relpath2 called with $tofile\n" if $debug;
print "relpath2 called with $pwd\n" if $debug;

$_ = $tofile;

s#/\./#/#g;     # Change /./ to /
s#^\./##g;      # Remove ./ from beginning of paths.

$tofile = $_;

#return $tofile if(/[^\/]/);# Don't mess with the file if no /'s.
# return if the path is already relative
return $tofile if /^[^\/]/;

@@from = split(/\//, $pwd);
@@to   = split(/\//, $tofile);
print "\n@@from\n@@to\n" if $debug;

while($from[0] eq $to[0] && $#to && $#from) {
	shift(@@from);
	shift(@@to);
	print "\n@@from\n@@to\n" if $debug;
}

$count = $#from;
print "count = $count\n" if $debug;
$newpath = "../" x $count . join('/', @@to[1..$#to]);
print "newpath = $newpath\n" if $debug;
$newpath;

}

#============
# anchor
#============

sub anchor {
local(%params) = @@_;
local($tag, @@keys, @@values);
local($debug) = 0;

# @@path is a global variable

@@params = %params;
print "anchor: @@params\n" if $debug;

$_ = $params{'href'};
if($_) {
	if(/[^\/]/) {
		$params{'href'} = "\"" . &relpath(&findpath($_)) . "\"";
		}
	}

$_ = $params{'onclick'};
if($_) {
#    print "found onclick with $_\n";
    s/'(.*.htm)'/&relpath(&findpath($1),1)/e;
    $params{'onclick'} = $_;
#    print "found onclick with $_\n";
	}

$tag = "<a " . &putparams(%params) . ">";
print "$tag\n" if $debug;
$tag;
}

#============
# img
#============

sub img {
local(%params) = @@_;
local($tag, @@keys, @@values);

# @@path is a global variable

$_ = $params{'src'};
if($_) {
	if(/[^\/]/) {
		$params{'src'} = &relpath(&findpath($_));
		}
	}

$tag = "<img " . &putparams(%params) . ">";

}

#============
# movie
#============

sub movie {
local(%params) = @@_;
local($tag, @@keys, @@values);

# @@path is a global variable

# print "Found movie\n";
# Fix the path to the movie source.
$_ = $params{'src'};
if($_) {
	if(/[^\/]/) {
		$params{'src'} = &relpath(&findpath($_));
		}
	}

# Now fix the path to the image source.  If the image source isn't given,
# use the same path as for the movie with .mov changed to gif.
$_ = $params{'imgsrc'};
if($_) {
    delete $params{'imgsrc'};
    $imgsrc = $_;
	if(/[^\/]/) {
		$imgsrc = &relpath(&findpath($_));
		}
} else {
    $imgsrc = $params{'src'};
    $imgsrc =~ s/.mov$/.gif/;
}

# Check to see if the plugin version of the movie exists.
# if so, use it.
$src  = $params{'src'};
$srca = $src;
$srca =~ s/.mov$/a.mov/;

if(-e  $srca) {
    $params{'src'} = $srca;
}

if($opt_e) {
    print "Embedding $src\n";

$tag = "<script language=\"JavaScript\"> \n" .
    "<!-- Hide\n" .

#    "if(navigator.appName == \"Netscape\" && (navigator.plugins[\"QuickTime Plug-In\"] || navigator.plugins[\"QuickTime Plugin\"])) { \n" .
    "if(1) { \n" .
    "document.write(\"<embed pluginspage='http://quicktime.apple.com' " . &putparams(%params) . "></embed>  \") \n" .
    "document.write(\"<a href=$srca>Movie</a>  \") \n" .
    "} else { \n" . 
    "document.write(\"<a href=$src><img src=$imgsrc></a>  \") \n" .
    "} \n" .
    "//stop Hiding --> \n" .
    "</script> \n" .
    "<noscript> \n" .
    "<a href=$src><img src=$imgsrc></a>  \n" .
    "</noscript> \n";
}
else {
    print "Not embedding $src\n";
    $tag = "<a href=$srca><img src=$imgsrc></a>\n";
}
}

1;
@


2.2
log
@Still playing around.
@
text
@d9 2
a10 2
#Revision 2.1  2000/04/12  19:44:45  myoder
#Verion for 2nd eidditiona.
d12 9
a20 2
#Revision 1.19  1997/10/23  21:03:28  myoder
#I'm not sure what I changed.
d76 1
a76 1
$Header = '$Header: /home/ratbert5/myoder/cd/support/lib/RCS/findpath.pl,v 2.1 2000/04/12 19:44:45 myoder Exp myoder $';
d105 2
d108 1
a108 1
if ($missingcount < 10) {
d111 3
d130 1
a130 1
local($tofile) = @@_;
d134 1
a134 1
print "relpath called with $tofile\n" if $debug;
d145 9
a153 1
return $tofile if /^[^\/]/;
a168 1
$newpath;
d170 8
d244 8
d321 3
d327 2
a328 1
    "if(navigator.appName == \"Netscape\" && (navigator.plugins[\"QuickTime Plug-In\"] || navigator.plugins[\"QuickTime Plugin\"])) { \n" .
d330 1
a330 1
    "document.write(\"<a href=$src>Movie</a>  \") \n" .
d339 5
a343 1

@


2.1
log
@Verion for 2nd eidditiona.
@
text
@d9 3
d69 1
a69 1
$Header = '$Header: /database/bookcd/visible/support/lib/RCS/findpath.pl,v 1.19 1997/10/23 21:03:28 myoder Exp myoder $';
@


1.20
log
@Added Embedded option in <movie>
@
text
@d9 2
a10 9
#Revision 1.18  1997/09/30  17:35:18  myoder
#Commented out a debug message.
#
#Revision 1.17  1997/09/17  22:13:55  myoder
#Hacked anchor to handle onClick=windo.open("this.html".,,).
#so relpath will find the path to this.html.
#Hacked a second argument to relpath.  If 1, relpath will put ""'s around
#the path returned.
#findpath only prints the search path once when it can't find a file.
d66 1
a66 1
$Header = '$Header: /home/ratbert5/myoder/bookcd/support/lib/RCS/findpath.pl,v 1.18 1997/09/30 17:35:18 myoder Exp myoder $';
a94 2
return($file) if ($file eq "#");

d96 1
a96 1
if ($missingcount == 1) {
a98 3
elsif ($missingcount < 10) {
    print "findpath: Can't find $file\n";
}
d115 1
a115 1
local($tofile, $quot) = @@_;
d119 1
a119 1
print "relpath called with $tofile and $quot\n" if $debug;
d130 1
a130 9
if (/^[^\/]/) {
    if($quot) {
	return "\"" .  $tofile . "\"";
    }
    else {
	return $tofile;
    }
}
# return $tofile if /^[^\/]/;
d146 1
a147 8
# print "quot = $quot\n";
if($quot) {
    print "Adding quotes\n";
    return("\"" . $newpath . "\"");
}
else {
    return($newpath);
}
a213 8
$_ = $params{'onclick'};
if($_) {
#    print "found onclick with $_\n";
    s/'(.*.htm)'/&relpath(&findpath($1),1)/e;
    $params{'onclick'} = $_;
#    print "found onclick with $_\n";
	}

a282 3
if($opt_e) {
    print "Embedding $src\n";

d286 1
a286 2
#    "if(navigator.appName == \"Netscape\" && (navigator.plugins[\"QuickTime Plug-In\"] || navigator.plugins[\"QuickTime Plugin\"])) { \n" .
    "if(1) { \n" .
d288 1
a288 1
    "document.write(\"<a href=$srca>Movie</a>  \") \n" .
d297 1
a297 5
}
else {
    print "Not embedding $src\n";
    $tag = "<a href=$srca><img src=$imgsrc></a>\n";
}
@


1.19
log
@I'm not sure what I changed.
@
text
@d9 10
d73 1
a73 1
$Header = '$Header: /database/bookcd/support/lib/RCS/findpath.pl,v 1.16 1997/02/28 17:00:49 myoder Exp $';
d102 2
d105 1
a105 1
if ($missingcount < 10) {
d108 3
d127 1
a127 1
local($tofile) = @@_;
d131 1
a131 1
print "relpath called with $tofile\n" if $debug;
d142 9
a150 1
return $tofile if /^[^\/]/;
a165 1
$newpath;
d167 8
d241 8
d318 3
d324 2
a325 1
    "if(navigator.appName == \"Netscape\" && (navigator.plugins[\"QuickTime Plug-In\"] || navigator.plugins[\"QuickTime Plugin\"])) { \n" .
d327 1
d336 5
a340 1

@


1.18
log
@Commented out a debug message.
@
text
@a8 7
#Revision 1.17  1997/09/17  22:13:55  myoder
#Hacked anchor to handle onClick=windo.open("this.html".,,).
#so relpath will find the path to this.html.
#Hacked a second argument to relpath.  If 1, relpath will put ""'s around
#the path returned.
#findpath only prints the search path once when it can't find a file.
#
d63 1
a63 1
$Header = '$Header: /home/ratbert5/myoder/bookcd/support/lib/RCS/findpath.pl,v 1.17 1997/09/17 22:13:55 myoder Exp myoder $';
a91 2
return($file) if ($file eq "#");

d93 1
a93 1
if ($missingcount == 1) {
a95 3
elsif ($missingcount < 10) {
    print "findpath: Can't find $file\n";
}
d112 1
a112 1
local($tofile, $quot) = @@_;
d116 1
a116 1
print "relpath called with $tofile and $quot\n" if $debug;
d127 1
a127 9
if (/^[^\/]/) {
    if($quot) {
	return "\"" .  $tofile . "\"";
    }
    else {
	return $tofile;
    }
}
# return $tofile if /^[^\/]/;
d143 1
a144 8
# print "quot = $quot\n";
if($quot) {
    print "Adding quotes\n";
    return("\"" . $newpath . "\"");
}
else {
    return($newpath);
}
a208 8
	}

$_ = $params{'onclick'};
if($_) {
#    print "found onclick with $_\n";
    s/'(.*.htm)'/&relpath(&findpath($1),1)/e;
    $params{'onclick'} = $_;
#    print "found onclick with $_\n";
@


1.17
log
@Hacked anchor to handle onClick=windo.open("this.html".,,).
so relpath will find the path to this.html.
Hacked a second argument to relpath.  If 1, relpath will put ""'s around
the path returned.
findpath only prints the search path once when it can't find a file.
@
text
@d9 7
d70 1
a70 1
$Header = '$Header: /home/ratbert5/myoder/bookcd/support/lib/RCS/findpath.pl,v 1.16 1997/02/28 17:00:49 myoder Exp myoder $';
d243 1
a243 1
    print "found onclick with $_\n";
@


1.16
log
@Added plusinspage to <embed> tag.
@
text
@d9 3
d63 1
a63 1
$Header = '$Header: /home/ratbert5/myoder/bookcd/support/lib/RCS/findpath.pl,v 1.15 1997/02/27 17:52:58 myoder Exp myoder $';
d92 2
d95 1
a95 1
if ($missingcount < 10) {
d98 3
d117 1
a117 1
local($tofile) = @@_;
d121 1
a121 1
print "relpath called with $tofile\n" if $debug;
d132 9
a140 1
return $tofile if /^[^\/]/;
a155 1
$newpath;
d157 8
d229 8
@


1.15
log
@Added <movie> tag.
@
text
@d9 3
d60 1
a60 1
$Header = '$Header: /home/ratbert5/myoder/bookcd/support/lib/RCS/findpath.pl,v 1.14 1996/11/12 19:01:13 myoder Exp myoder $';
d281 1
a281 1
    "document.write(\"<embed " . &putparams(%params) . "></embed>  \") \n" .
@


1.14
log
@hacked relpath to relpath2 which returns the path from the
top of the CD structure.
@
text
@d9 4
d57 1
a57 1
$Header = '$Header: /home/ratbert5/myoder/bookcd/support/lib/RCS/findpath.pl,v 1.13 1996/06/04 21:08:37 myoder Exp myoder $';
d228 59
@


1.13
log
@Counts number of missing files and only reports the first 10.
@
text
@d9 3
d53 1
a53 1
$Header = '$Header: /home/ratbert5/myoder/bookcd/support/lib/RCS/findpath.pl,v 1.12 1996/06/03 17:46:58 myoder Exp myoder $';
d132 43
@


1.12
log
@Added code to findpath and relpath to remove extra ./ in pathes.
@
text
@d9 3
d50 1
a50 1
$Header = '$Header: /home/kirin/myoder/bookcd/support/lib/RCS/findpath.pl,v 1.11 1995/08/08 17:04:21 myoder Exp myoder $';
d79 10
a88 1
print "findpath: Can't find $file in @@path\n";
@


1.11
log
@findpath() will return if the path begins with a /
@
text
@d9 3
d47 1
a47 1
$Header = '$Header: /a/crowe/export/home/crowe3/ee2200cd/support/lib/RCS/findpath.pl,v 1.10 1995/07/06 16:58:22 myoder Exp $';
d60 5
d94 6
@


1.10
log
@findpath now uses the global variable @@path instead of a second parameter.
relpath simply returns paths that are already relative.
@
text
@d9 4
d44 1
a44 1
$Header = '$Header: /a/crowe/export/home/crowe3/ee2200cd/support/lib/RCS/findpath.pl,v 1.9 1995/06/29 21:46:54 myoder Exp $';
d57 2
a58 1
return $file if(/\//);	# return if there is a / in the file name
@


1.9
log
@Fixed bug:  added & to relpath.
@
text
@d9 3
d40 1
a40 1
$Header = '$Header: /a/crowe/export/home/crowe3/ee2200cd/support/lib/RCS/findpath.pl,v 1.8 1995/06/19 18:26:19 myoder Exp $';
d48 1
a48 1
local($file, @@path) = @@_;
d78 2
d81 3
a83 1
return $tofile if(/[^\/]/);# Don't mess with the file if not /'s.
d89 1
a89 1
while($from[0] eq $to[0] && $#to) {
d97 3
a99 1
"../" x $count . join('/', @@to)
d120 1
a120 1
		$params{'href'} = "\"" . &relpath(&findpath($_, @@path)) . "\"";
d142 1
a142 1
		$params{'src'} = &relpath(&findpath($_, @@path));
@


1.8
log
@Added 1; at the end so it will work with 'require'.
@
text
@d9 3
d37 1
a37 1
$Header = '$Header: /home/kirin/myoder/bookcd/support/lib/RCS/findpath.pl,v 1.7 1995/06/19 18:16:42 myoder Exp myoder $';
d57 1
a57 1
		return(relpath($full));
@


1.7
log
@*** empty log message ***
@
text
@d9 3
d34 1
a34 1
$Header = '$Header: /home/kirin/myoder/bookcd/support/lib/RCS/findpath.pl,v 1.6 1995/06/19 18:10:24 myoder Exp myoder $';
d137 2
@


1.6
log
@Fixed comment bug
@
text
@d9 3
d31 1
a31 1
$Header = '$Header: /home/kirin/myoder/bookcd/support/lib/RCS/findpath.pl,v 1.5 1995/06/01 18:57:57 myoder Exp myoder $';
@


1.5
log
@relpath($tofile) now takes only one argument and finds the relative
path from the current directory.
If there is no / in $tofile relpath() returns $tofile.
anchor and img return relative paths.
anchor and img now use putparams().
@
text
@d9 7
d28 1
a28 1
$Header = '$Header: /home/kirin/myoder/bookcd/support/scripts/RCS/findpath.pl,v 1.4 1995/06/01 16:45:36 myoder Exp myoder $';
@


1.4
log
@Changed some comments with % to #
@
text
@d3 1
a3 1
# relpath($fromdir, $tofile) - finds relative path from $fromdir to $tofile
d9 3
d21 1
a21 1
$Header = '$Header: /home/kirin/myoder/bookcd/support/scripts/RCS/findpath.pl,v 1.3 1995/06/01 16:43:56 myoder Exp myoder $';
d35 1
d38 1
a38 1
	$full = $path . ":" . $file;
d41 1
a41 1
		return($full);
d53 1
a53 1
# finds a relative path between fromdir and tofile
d55 1
a55 1
local($fromdir, $tofile) = @@_;
d57 4
a60 1
#local($debug) = 1;
d62 1
a62 1
@@from = split(/\//, $fromdir);
d85 1
d89 3
d95 1
a95 1
		$params{'href'} = "\"" . &findpath($_, @@path) . "\"";
d99 3
a101 8
$tag = "<a ";

@@keys = keys %params;
@@values = values %params;
while ($#keys >= 0) {
	$tag .= pop(@@keys) . '=' . pop(@@values);
	}
$tag .= ">";
d117 1
a117 1
		$params{'src'} = &findpath($_, @@path);
a119 1
$tag = "<img ";
d121 3
a123 6
@@keys = keys %params;
@@values = values %params;
while ($#keys >= 0) {
	$tag .= pop(@@keys) . '=' . pop(@@values);
	}
$tag .= ">";}
@


1.3
log
@Changed comment character to #
@
text
@d9 3
d15 4
a18 4
% Revision 1.1  1995/06/01  15:55:20  myoder
% Initial revision
%";
$Header = '$Header: /home/kirin/myoder/bookcd/support/scripts/RCS/findpath.pl,v 1.2 1995/06/01 16:42:43 myoder Exp myoder $';
@


1.2
log
@Changed comment character to #
@
text
@d9 3
d15 1
a15 1
$Header = '$Header: /home/kirin/myoder/bookcd/support/scripts/RCS/findpath.pl,v 1.1 1995/06/01 15:55:20 myoder Exp myoder $';
@


1.1
log
@Initial revision
@
text
@d8 5
a12 2
#"$Log$";
$Header = '$Header$';
d104 1
a104 1
	if(/[^/]/) {
@
