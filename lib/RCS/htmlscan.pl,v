head	1.7;
access;
symbols;
locks; strict;
comment	@#@;


1.7
date	97.01.24.14.43.33;	author myoder;	state Exp;
branches;
next	1.6;

1.6
date	96.03.15.21.02.34;	author myoder;	state Exp;
branches;
next	1.5;

1.5
date	96.02.06.17.40.05;	author myoder;	state Exp;
branches;
next	1.4;

1.4
date	96.02.06.17.37.45;	author myoder;	state Exp;
branches;
next	1.3;

1.3
date	95.07.18.15.12.47;	author myoder;	state Exp;
branches;
next	1.2;

1.2
date	95.07.06.17.02.06;	author myoder;	state Exp;
branches;
next	1.1;

1.1
date	95.07.06.17.00.19;	author myoder;	state Exp;
branches;
next	;


desc
@Contains htmlscan and foundtag.
These are the routines that do the work of checking the input file
for html extensions.
@


1.7
log
@none
@
text
@# $Log: htmlscan.pl,v $
#Revision 1.6  1996/03/15  21:02:34  myoder
#Tags are now mapped to lower case.
#
#Revision 1.5  1996/02/06  17:40:05  myoder
#Removed a stray ;
#
#Revision 1.4  1996/02/06  17:37:45  myoder
#Fixed bug in foundtag();  Forgot to init $tag.
#
#Revision 1.3  1995/07/18  15:12:47  myoder
#None?
#
#Revision 1.2  1995/07/06  17:02:06  myoder
#FIxed comment character.
#
#Revision 1.1  1995/07/06  17:00:19  myoder
#Initial revision
#;

$Header = '$Header: /database/bookcd/support/lib/RCS/htmlscan.pl,v 1.6 1996/03/15 21:02:34 myoder Exp myoder $';
#===========================
# htmlscan
#===========================
# Scans through array of strings looking for < followed by an
# html extenstion.  If it is found it is expanded, if not it is
# just passed through.

sub htmlscan {
local(@@allwords) = @@_;
local($tag) = '';

while(@@allwords) {
	$word = shift(@@allwords);

	if($word eq ">") {	# A complete html tag has been found
		$tag .= $word;
		&foundtag($tag);
		$tag = '';
		}
	elsif($word eq "<" || $tag) {	# the start of a tag
		$tag .= $word;
		}
	else {	# no tag, keep passing things through
		print HTML $word;
	}
}	# while(@@allwords)
}	# htmlscan()

#===========================
# foundtag
#===========================
sub foundtag {
local($tag) = @@_;
local($debug) = 0;

print "Tag $tag\n" if $debug;
@@fields = split(/[<\s>]/, $tag);	# Parse so we can get to the first word
#foreach $tmp (@@fields) {
#	print "fields[] = $tmp\n";
#	}

# Lookup the word in database

$_ = @@fields[1];
	tr/[A-Z]/[a-z]/;# Map to lower-case

$value = $data{$_};
if($value) {			# True if it was there
#	print "Found tag, $tag, with value, $value\n" if $debug;
	if(substr($value,0,1) eq "&") {
#		print "Found function $value\n" if $debug;
		%params = &getparams($tag);
		$value = eval $value;		# database has name of function to call
#		print "Processing chap $chap, unit $unit\n" if $debug;
		}
	$tag = $value;
	} # if($value)
print HTML "$tag";
}

1;
@


1.6
log
@Tags are now mapped to lower case.
@
text
@d2 3
d21 1
a21 1
$Header = '$Header: /a/crowe/export5/ee2200cd/support/lib/RCS/htmlscan.pl,v 1.5 1996/02/06 17:40:05 myoder Exp $';
@


1.5
log
@Removed a stray ;
@
text
@d2 3
d18 1
a18 1
$Header = '$Header: /home/kirin/myoder/bookcd/support/lib/RCS/htmlscan.pl,v 1.4 1996/02/06 17:37:45 myoder Exp myoder $';
d61 5
a65 1
$value = $data{@@fields[1]};
@


1.4
log
@Fixed bug in foundtag();  Forgot to init $tag.
@
text
@d2 3
d15 1
a15 1
$Header = '$Header: /home/kirin/myoder/bookcd/support/lib/RCS/htmlscan.pl,v 1.3 1995/07/18 15:12:47 myoder Exp myoder $';
d25 1
a25 1
local($tag) = '';;
@


1.3
log
@None?
@
text
@d2 3
d12 1
a12 1
$Header = '$Header: /a/crowe/export/home/crowe3/ee2200cd/support/lib/RCS/htmlscan.pl,v 1.2 1995/07/06 17:02:06 myoder Exp $';
d22 1
a22 1
local($tag);
@


1.2
log
@FIxed comment character.
@
text
@d2 3
d9 1
a9 1
$Header = '$Header: /home/kirin/myoder/bookcd/support/lib/RCS/htmlscan.pl,v 1.1 1995/07/06 17:00:19 myoder Exp myoder $';
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
# $Log$;
d6 1
a6 1
$Header = '$Header$';
@
